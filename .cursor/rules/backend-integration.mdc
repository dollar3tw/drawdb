---
description: 
globs: 
alwaysApply: false
---
# 整合式服務架構指南

## 整合式架構

### 服務結構
- **server.cjs** - 整合式服務主檔案（Express 伺服器 + 靜態檔案服務）
- **package.json** - 專案依賴管理
- [routes/](mdc:routes) - API 路由定義
- [database/](mdc:database) - 資料庫相關檔案
- [middleware/](mdc:middleware) - Express 中介軟體
- **drawdb.sqlite** - SQLite 資料庫檔案

### 資料庫
- 使用 SQLite 作為主要資料庫
- 資料庫檔案: `database/drawdb.sqlite`
- WAL 模式檔案: `drawdb.sqlite-wal`, `drawdb.sqlite-shm`

## 前後端通訊

### API 整合
- 前端使用 Axios 進行 HTTP 請求
- API 相關程式碼位於 [src/api/](mdc:src/api) 目錄
- 支援完整的使用者認證、圖表管理和分享功能

### 環境配置
- 整合式服務同時提供前端和後端功能
- 前端建置後由 Express 提供靜態檔案服務
- API 端點位於 `/api/*` 路徑下

### 核心功能
- 使用者認證與授權
- 圖表 CRUD 操作
- 模板管理
- 檔案分享
- 協作編輯

## 部署選項

### 整合式部署（推薦）
- 單一服務包含前後端所有功能
- 支援完整的分享和協作功能
- 資料持久化儲存在 SQLite

### Docker 部署
使用 [Dockerfile](mdc:Dockerfile)：

```bash
# 建置 Docker 映像
docker build -t drawdb .

# 運行容器
docker run -p 3001:3001 drawdb
```

## 開發模式

### 整合式開發
```bash
# 安裝依賴
npm run setup

# 開發模式（自動重新載入）
npm run dev:server
```
- 服務運行在 http://localhost:3001
- 前端會自動建置並由同一服務提供
- API 端點：http://localhost:3001/api

### 生產建置
```bash
# 建置並啟動
npm run build
npm start
```
- 建置結果輸出到 `dist/` 目錄
- 整合服務同時提供前端和 API

## 資料流程

### 持久化資料
- 使用 SQLite 儲存所有資料
- 支援使用者、圖表、模板等資料
- 自動會話管理和清理

### 前端資料管理
- 使用 React Context API 管理狀態
- 透過 API 與後端同步資料
- 支援即時更新和協作

## API 端點

### 認證相關
- `POST /api/auth/register` - 使用者註冊
- `POST /api/auth/login` - 使用者登入
- `POST /api/auth/logout` - 使用者登出

### 圖表管理
- `GET /api/diagrams` - 獲取所有圖表
- `POST /api/diagrams` - 創建新圖表
- `GET /api/diagrams/:id` - 獲取特定圖表
- `PUT /api/diagrams/:id` - 更新圖表
- `DELETE /api/diagrams/:id` - 刪除圖表

### 模板管理
- `GET /api/templates` - 獲取所有模板
- `POST /api/templates` - 創建新模板

## 故障排除

### 端口佔用
```bash
# 查看佔用端口的程序
lsof -i :3001

# 停止服務
pkill -f "node server.cjs"

# 使用其他端口
PORT=3002 npm start
```

### 資料庫問題
```bash
# 重置資料庫（會清除所有資料）
rm -f database/drawdb.sqlite*
npm start
```
